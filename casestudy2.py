# -*- coding: utf-8 -*-
"""Module 07 CW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gTCrKG1jki6mSnIBYaexkj44YdF1pc41

# BANA4143 Module 07 Class Work 1

Let's look at several ways we can plot and customize plots in Python.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#Run this to allow multiple outputs
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

#You should make sure you have at least version 0.11.0 of seaborn.
sns.__version__

from google.colab import drive
drive.mount('/content/drive')

customer_orders = pd.read_csv(r"/content/drive/MyDrive/stout/casestudy.csv")

#let's look at the first few rows of this dataset
customer_orders.head()

#let's also get some info on the type of objects it contains
customer_orders.info()

#Total revenue for the current year

#2015
rev_2015 = round(customer_orders.loc[customer_orders['year']==2015, 'net_revenue'].sum(),2)
print(rev_2015)

#2016
rev_2016 = round(customer_orders.loc[customer_orders['year']==2016, 'net_revenue'].sum(),2)
print(rev_2016)

#2017
rev_2017 = round(customer_orders.loc[customer_orders['year']==2017, 'net_revenue'].sum(),2)
print(rev_2017)

#New Customers Revenue

#2016
newrev_2016 = customer_orders.drop_duplicates(subset ="customer_email").loc[customer_orders['year']==2016, 'net_revenue'].sum()
print(newrev_2016)

#2017
newrev_2017 = customer_orders.drop_duplicates(subset ="customer_email").loc[customer_orders['year']==2017, 'net_revenue'].sum()
print(newrev_2017)

#Existing Customer Growth

#2016
existrev_prev_2016 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] <=2016].loc[customer_orders['year'] == 2015, 'net_revenue'].sum()
existrev_cur_2016 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] <=2016].loc[customer_orders['year'] == 2016, 'net_revenue'].sum()
existrev_growth_2016 = existrev_cur_2016 - existrev_prev_2016
print(existrev_prev_2016, existrev_cur_2016, existrev_growth_2016)

#2017
existrev_prev_2017 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] >= 2016].loc[customer_orders['year'] == 2016, 'net_revenue'].sum()
existrev_cur_2017 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] >= 2016].loc[customer_orders['year'] == 2017, 'net_revenue'].sum()
existrev_growth_2017 = existrev_cur_2017 - existrev_prev_2017
print(existrev_prev_2017, existrev_cur_2017, existrev_growth_2017)

#Revenue lost from attrition

#2016
attritionrev_2016 = rev_2015 - existrev_prev_2016
print(attritionrev_2016)

#2017
attritionrev_2017 = rev_2016 - existrev_prev_2017
print(attritionrev_2017)

#Total customers

#2015
cus_2015 = customer_orders.loc[customer_orders['year']==2015, 'net_revenue'].count()
print(cus_2015)

#2016
cus_2016 = customer_orders.loc[customer_orders['year']==2016, 'net_revenue'].count()
print(cus_2016)

#2017
cus_2017 = customer_orders.loc[customer_orders['year']==2017, 'net_revenue'].count()
print(cus_2017)

#New Customers

#2016
newcus_2016 = customer_orders.drop_duplicates(subset ="customer_email").loc[customer_orders['year']==2016, 'net_revenue'].count()
print(newcus_2016)

#2017
newcus_2017 = customer_orders.drop_duplicates(subset ="customer_email").loc[customer_orders['year']==2017, 'net_revenue'].count()
print(newcus_2017)

#Lost customers

#2016
existcus_prev_2016 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] <=2016].loc[customer_orders['year'] == 2015, 'net_revenue'].count()
lostcus_2016 = cus_2015 - existcus_prev_2016
print(lostcus_2016)


#2017
existcus_prev_2017 = customer_orders[customer_orders.duplicated(['customer_email'],keep=False)].loc[customer_orders['year'] ==2017, 'net_revenue'].count()
lostcus_2017 = cus_2017 - existcus_prev_2017
print(lostcus_2017)

"""### Relational Plots"""

#simple figure level plot. Scatter is default for relplot 
#so no kind argument is provided
sns.countplot(x='year', data=customer_orders)

#simple figure level plot. Scatter is default for relplot 
#so no kind argument is provided
sns.countplot(x='year',y='net_revenue', data=customer_orders)

"""### Distribution Plots"""

#The default displot is a histogram.
sns.displot(customer_orders, x='net_revenue')

#We can customize the number of bins.
sns.displot(customer_orders, x='net_revenue', bins=10)